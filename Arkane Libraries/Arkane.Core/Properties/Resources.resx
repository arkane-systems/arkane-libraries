<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="LogProvider_ForceResolveLogProvider_ExceptionResolvingLogProvider" xml:space="preserve">
    <value>Exception occurred resolving a log provider. Logging for this assembly {0} is disabled. {1}</value>
  </data>
  <data name="LoggerExecutionWrapper_FailedToGenerateLogMessage" xml:space="preserve">
    <value>Failed to generate log message.</value>
  </data>
  <data name="LogProviderBase_ErrorInitializingProvider_ProblemInitializingLogProvider" xml:space="preserve">
    <value>Unable to log due to problem initializing the log provider. See inner exception for details.</value>
  </data>
  <data name="SerilogLogger_Initialize_LogLevelEventTypeNotFound" xml:space="preserve">
    <value>Type Serilog.Events.LogEventLevel was not found.</value>
  </data>
  <data name="SerilogLogger_Initialize_ILoggerNotFound" xml:space="preserve">
    <value>Type Serilog.ILogger was not found.</value>
  </data>
  <data name="SerilogLogProvider_SerilogLogProvider_LogNotFound" xml:space="preserve">
    <value>Serilog.Log not found.</value>
  </data>
  <data name="SerilogLogProvider_GetPushProperty_LogContextNotFound" xml:space="preserve">
    <value>Serilog LogContext type not found.</value>
  </data>
  <data name="SerilogLogProvider_GetForContextMethodCall_LogNotFound" xml:space="preserve">
    <value>Serilog Log type not found.</value>
  </data>
  <data name="PackerUtility_Initialize_CodeNotReplaced" xml:space="preserve">
    <value>The code in this method should have been replaced at build time by the Packer. If you see this, it's probably because you didn't configure Packer with an assembly-wide attribute.</value>
  </data>
  <data name="CannotHappenException_CannotHappenException_SomethingHappened" xml:space="preserve">
    <value>Something happened which cannot happen.</value>
  </data>
  <data name="SubclassResponsibilityException_SubclassResponsibilityException_MustImplementInSubclass" xml:space="preserve">
    <value>This functionality must be implemented by a subclass of this base class.</value>
  </data>
  <data name="TypeArgumentException_TypeArgumentException_InvalidTypeArgument" xml:space="preserve">
    <value>An invalid type argument was specified.</value>
  </data>
  <data name="PostCompileAttribute_CompileTimeValidate_CannotApplyToConstructorsDestructors" xml:space="preserve">
    <value>The PostCompile aspect cannot be applied to constructors/destructors.</value>
  </data>
  <data name="PostCompileAttribute_CompileTimeValidate_CanOnlyApplyToStaticMethods" xml:space="preserve">
    <value>The PostCompile aspect can only be applied to static methods.</value>
  </data>
  <data name="PostCompileAttribute_CompileTimeValidate_CanOnlyApplyToParameterless" xml:space="preserve">
    <value>The PostCompile aspect can only be applied to methods without parameters.</value>
  </data>
  <data name="PostCompileAttribute_CompileTimeValidate_CanOnlyApplyToVoidReturn" xml:space="preserve">
    <value>The PostCompile aspect can only be applied to methods returning void.</value>
  </data>
  <data name="PostCompileAttribute_CompileTimeValidate_LastPostCompileRunSucceeded" xml:space="preserve">
    <value>Last post-compile run succeeded at {0}.</value>
  </data>
  <data name="PostCompileAttribute_CompileTimeValidate_LastPostCompileRunFailed" xml:space="preserve">
    <value>Last post-compile run failed at {0}: {1}.</value>
  </data>
  <data name="Enums_ParseName_UnknownValueName" xml:space="preserve">
    <value>Unknown enumeration value name.</value>
  </data>
  <data name="Enums_GetUsedBits_CannotCallForNonFlags" xml:space="preserve">
    <value>Can't call this method for a non-flags enum.</value>
  </data>
  <data name="ας_System_CannotCallForNonFlagsEnum" xml:space="preserve">
    <value>Cannot call this method for a non-flags enum.</value>
  </data>
  <data name="ας_System_Text_Chop_ChopLongerThanString" xml:space="preserve">
    <value>chopSize &gt;= @this.Length</value>
  </data>
  <data name="SingletonConstraintAttribute_ValidateCode_NoInstanceCreationMethod" xml:space="preserve">
    <value>The {0} type does not have 'private static readonly Lazy&lt;{0}&gt; Lazy = new Lazy&lt;{0}&gt; (() =&gt; new {0} ());'.</value>
  </data>
  <data name="SingletonConstraintAttribute_ValidateCode_NoInstanceProperty" xml:space="preserve">
    <value>The {0} type does not have 'public static {0} Instance =&gt; {0}.Lazy.Value'.</value>
  </data>
  <data name="SingletonConstraintAttribute_ValidateCode_AmbiguousInstanceProperty" xml:space="preserve">
    <value>Ambiguous Instance property.</value>
  </data>
  <data name="SingletonConstraintAttribute_ValidateCode_NoPrivateConstructor" xml:space="preserve">
    <value>The {0} type does not have a single, parameterless private constructor.</value>
  </data>
  <data name="ας_System_TryDispose_NullIDisposablePassedToTryDispose" xml:space="preserve">
    <value>Null IDisposable passed to TryDispose().</value>
  </data>
  <data name="UnsealableConstraintAttribute_ValidateCode_SubclassesCannotBeSealed" xml:space="preserve">
    <value>Subclasses of {1} ({0}) cannot be sealed.</value>
  </data>
  <data name="ας_System_Left_LengthMustBeLess" xml:space="preserve">
    <value>Length must be less than the length of the string.</value>
  </data>
  <data name="ας_System_BetweenSentinels_SentinelsCannotBeIdentical" xml:space="preserve">
    <value>Sentinels cannot be identical.</value>
  </data>
  <data name="ας_System_SubstringByRange_EndIndexMustBePastStartIndex" xml:space="preserve">
    <value>End index must be &gt;= start index.</value>
  </data>
  <data name="CrossThreadException_CrossThreadException_ExceptionHasBeenMarshaled" xml:space="preserve">
    <value>An exception occurred on another thread and has been marshaled into this wrapper: {0}.</value>
  </data>
  <data name="TransactionAttribute_OnEntry_InitiatedTransaction" xml:space="preserve">
    <value>{0}.{1}: initiated transaction {2}.</value>
  </data>
  <data name="TransactionAttribute_OnSuccess_CommittedTransaction" xml:space="preserve">
    <value>{0}.{1}: committed transaction {2}.</value>
  </data>
  <data name="TransactionAttribute_OnException_RolledBackTransaction" xml:space="preserve">
    <value>{0}.{1}: rolled back transaction {2} on exception.</value>
  </data>
  <data name="CallMeMaybeAttribute_CallMeMaybeAttribute_MustBeExceptionType" xml:space="preserve">
    <value>Must be a System.Exception or a type derived from System.Exception.</value>
  </data>
  <data name="StringManipulationAttribute_CompileTimeValidate_CanOnlyBeUsedOnString" xml:space="preserve">
    <value>StringManipulationAttribute can only be used on a string.</value>
  </data>
  <data name="StringManipulationAttribute_ConvertString_CannotBeNull" xml:space="preserve">
    <value>{0} cannot be null.</value>
  </data>
  <data name="Memento_Dispose_AttemptedSecondDisposal" xml:space="preserve">
    <value>Attempted to dispose the same Memento twice.</value>
  </data>
  <data name="DisposerBase_~DisposerBase_ObjectWasNotDisposed" xml:space="preserve">
    <value>{0} object was not disposed. You should call Dispose() on this {1} instead of letting it be finalized.</value>
  </data>
  <data name="DisposerByReflection_DisposerByReflection_CantBeStaticMethod" xml:space="preserve">
    <value>disposer: Can't be a static method.</value>
  </data>
  <data name="DisposerByReflection_DisposerByReflection_CantBeMethodWithParameters" xml:space="preserve">
    <value>disposer: Can't be a method with parameters.</value>
  </data>
  <data name="DisposerByReflection_DisposerByReflection_disposer_CantBeMethodWithUnassignedTypeParams" xml:space="preserve">
    <value>disposer: Can't be a method with unassigned generic type parameters.</value>
  </data>
  <data name="DisposerByReflection_GetPublicParameterlessInstanceMethod_NoPublicParamlessInstanceMethod" xml:space="preserve">
    <value>disposer: Object does not have a public, parameterless {0} instance method.</value>
  </data>
</root>